// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// User Access and Permissions (necessary for NextAuth)
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String               @id @default(cuid())
  name             String?
  email            String?              @unique
  emailVerified    DateTime?
  image            String?
  role             Role                 @default(BASIC)
  accounts         Account[]
  sessions         Session[]
  lessonsCompleted UserLessonProgress[]
}

enum Role {
  BASIC
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Course, Lessons and Content related data
model Course {
  id          String   @id @default(cuid())
  name        String
  description String
  slug        String   @unique
  imageUrl    String?
  parts       Part[]
  lessons     Lesson[]
  author      String?
  published   Boolean  @default(false)
}

model Part {
  id       String   @id @default(cuid())
  name     String
  slug     String
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  lessons  Lesson[]
}

model Lesson {
  id             String               @id @default(cuid())
  name           String
  description    String
  slug           String
  part           Part?                @relation(fields: [partId], references: [id])
  partId         String?
  course         Course               @relation(fields: [courseId], references: [id])
  courseId       String
  content        LessonContent?
  transcript     LessonTranscript?
  video          Video?
  usersCompleted UserLessonProgress[]
}

model LessonContent {
  id        String   @id @default(cuid())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String   @unique
  content   Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LessonTranscript {
  id         String   @id @default(cuid())
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  lessonId   String   @unique
  transcript Bytes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Video {
  id        String  @id @default(cuid())
  lesson    Lesson? @relation(fields: [lessonId], references: [id])
  lessonId  String? @unique
  fileName  String
  duration  Float?
  posterUrl String?
}

model UserLessonProgress {
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    String
  completedAt DateTime @default(now())

  @@id([userId, lessonId])
}
